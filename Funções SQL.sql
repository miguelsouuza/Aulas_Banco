USE Empresa
GO

INSERT INTO ENDERECO VALUES ('fLAMENGO','RJ',1)
INSERT INTO ENDERECO VALUES ('MORUMBI','SP',2)
INSERT INTO ENDERECO VALUES ('CENTRO','MG',4)
INSERT INTO ENDERECO VALUES ('CENTRO','SP',5)
GO

INSERT INTO ALUNO VALUES ('MIGUEL','M','2002/09/07','MIGUEL.SILVA@GMAIL.COM')
INSERT INTO ALUNO VALUES ('HENRY','M','2000/01/15','HENRY.SILVA@GMAIL.COM')
INSERT INTO ALUNO VALUES ('DAVID','M','2000/01/18','DAVID.JORGE@GMAIL.COM')
INSERT INTO ALUNO VALUES ('MARCOS','M','2000/01/22','MARCOS.ANTONIO@GMAIL.COM')
GO

CREATE TABLE TELEFONE(
	IDTELEFONE INT IDENTITY(1,1),
	TIPO CHAR(3) NOT NULL, 
	NUMERO VARCHAR(10) NOT NULL,
	IDALUNO INT
)
GO

/*CRIANDO CHAVES PRIMARIAS*/
ALTER TABLE TELEFONE ADD CONSTRAINT PK_TELEFONE
PRIMARY KEY (IDTELEFONE)
GO

/*CRIANDO CHAVE SECUNDARIA*/
ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY (IDALUNO) REFERENCES ALUNO(IDALUNO)
GO

/*CRIANDO UMA REGRA*/
ALTER TABLE TELEFONE ADD CONSTRAINT CK_TIPO
CHECK (TIPO IN ('RES','COM','CEL'))
GO

INSERT INTO TELEFONE VALUES('CEL','7899889',1)
INSERT INTO TELEFONE VALUES('RES','432544',1)
INSERT INTO TELEFONE VALUES('COM','4354354',2)
INSERT INTO TELEFONE VALUES('CEL','2344556',2)
GO 

/*PEGAR DATA ATUAL*/

SELECT GETDATE()
GO

/*CLAUSULA AMBIGUA
PARA TRATAR AMBIGUIDADE NO BANCO DE DADOS DEVERÁ PONTERA OS DADOS
PARA RETORNAR TODOS OS ALUNOS MESMO OS QUE NÃO TIVEREM OS DADOS TERA QUE COLOCAR UM INNER JOIN PARA A ESQUERDA*/

SELECT 
	A.NOME, 
	ISNULL(T.TIPO,'SEM') AS "TIPO", 
	ISNULL(T.NUMERO,'NUMERO') AS "TELEFONE",
	E.BAIRRO,
	E.UF
FROM ALUNO A
LEFT JOIN TELEFONE T
ON A.IDALUNO=T.IDALUNO 
INNER JOIN ENDERECO E
ON A.IDALUNO=E.ID_ALUNO
GO

/*DATEDIFF - CALCULA A DIFERENÇA ENTRE 2 DATAS
FUNCAO GETDATE() TRAZ DIA E HORA*/

SELECT NOME,
GETDATE() AS "DIA/HORA"
FROM ALUNO
GO

/*RETORNANDO A IDADE EM DIAS*/
SELECT NOME,DATEDIFF(DAY,NASCIMENTO,GETDATE()) AS "IDADE EM DIAS"
FROM ALUNO
GO

/*RETORNANDO A IDADE EM ANOS*/
SELECT NOME,DATEDIFF(YEAR,NASCIMENTO,GETDATE()) AS "IDADE EM ANOS"
FROM ALUNO
GO

SELECT NOME,(DATEDIFF(DAY,NASCIMENTO,GETDATE())/365) AS "IDADE EM ANOS"
FROM ALUNO
GO

SELECT NOME,(DATEDIFF(MONTH,NASCIMENTO,GETDATE())/12) AS "IDADE EM ANOS"
FROM ALUNO
GO

/*RETORNANDO A IDADE EM MES*/
SELECT NOME,DATEDIFF(MONTH,NASCIMENTO,GETDATE()) AS "IDADE EM MESES"
FROM ALUNO
GO

/*DATENAME - TRAZ O NOME DA DATA QUE ESTA NO DADO*/
 
SELECT NOME, DATENAME(MONTH, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO)
FROM ALUNO
GO

/*DATEPART - TRAZ O NUMERO EM INTEIRO QUE ESTA NO DADO*/

SELECT NOME, DATEPART(MONTH,NASCIMENTO)
FROM ALUNO
GO

/*MESCLANDO FUNCOES DE DATAS*/
SELECT NOME, DATEPART(MONTH,NASCIMENTO),DATENAME(MONTH,NASCIMENTO)
FROM ALUNO
GO

/*DATEADD - RETORNA UMA DATA SOMANDO A OUTRA*/
SELECT DATEADD(DAY,365,GETDATE())

SELECT DATEADD(YEAR,10,GETDATE())

/*CONVERSAO DE DADOS*/
SELECT 1 + '1'
GO


/*FUNCAO CAST*/
SELECT CAST('1' AS INT) + CAST('1' AS INT)
GO

/*FORMATAÇÃO DE DATA*/
SELECT NOME,
CAST(DAY(NASCIMENTO)AS VARCHAR) + '/' + 
CAST(MONTH(NASCIMENTO)AS VARCHAR) + '/' + 
CAST(YEAR(NASCIMENTO)AS VARCHAR) AS NASCIMENTO
FROM ALUNO
GO

/*CHARINDEX - RETORNA UM INTEIRO ATRAVES DE UMA PROCURA
CONTAGEM DEFAULT - INICIA EM 01 QUANDO NÃO COLOCADA O TERCEIRO PARAMETRO*/

SELECT NOME, CHARINDEX('A',NOME,3) AS INDICE
FROM  ALUNO
GO

/* BULK INSERT - IMPORTAÇÃO DE ARQUIVOS */
CREATE TABLE LANCAMENTO_CONTABIL(
	CONTA INT,
	VALOR INT,
	DEB_CRED CHAR(1)
)
GO
/*
\t = TAB
\n = ENTER 
*/

/*BULK INSERT - INSERE DADOS DE UM ARQUIVO JA EXISTENTE */
BULK INSERT LANCAMENTO_CONTABIL
FROM 'C:\Users\MSilva\Documents\Estudos\Dados.txt'
WITH
(
	/*ONDE OS DADOS COMEÇAM*/
	FIRSTROW=2,
	/*TIPO DE DADOS*/
	DATAFILETYPE='CHAR',
	/*DELIMITADOR DO DADO*/
	FIELDTERMINATOR='\t',
	/*ONDE TERMINA OS DADOS*/
	ROWTERMINATOR='\n'
)	
GO

/*DEBITO E CREDITO*/
SELECT CONTA,
	   VALOR,
	   CHARINDEX('C',DEB_CRED) AS CREDITO,
	   CHARINDEX('D',DEB_CRED) AS DEBITO,
	   CHARINDEX('C',DEB_CRED)*2 - 1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL

SELECT CONTA,
SUM(VALOR*(CHARINDEX('C',DEB_CRED)*2 - 1 )) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA


/*Triggers
NUMEREIC = FLOAT */

CREATE TABLE PRODUTOS(
	IDPRODUTO INT IDENTITY(1,1),
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL,
)
GO

CREATE TABLE HISTORICO(
	IDOPERACAO INT IDENTITY(1,1),
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECOANTIGO NUMERIC(10,2) NOT NULL,
	PRECONOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100)
)
GO

/*CRIAÇÃO DE CHAVE PRIMARY*/
ALTER TABLE PRODUTOS ADD CONSTRAINT PK_PRODUTO
PRIMARY KEY (IDPRODUTO)
GO

ALTER TABLE HISTORICO ADD CONSTRAINT PK_HISTORICO
PRIMARY KEY(IDOPERACAO)
GO

INSERT INTO PRODUTOS VALUES('LIVRO SQL SERVER','LIVROS',98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE','LIVROS',50.00)
INSERT INTO PRODUTOS VALUES('LICENÇA POWERCENTER','SOFTWARES',45000.00)
INSERT INTO PRODUTOS VALUES('NOTEBOOK I9','COMPUTADORES',3150.00)
INSERT INTO PRODUTOS VALUES('LIVRO BUSINESS INTELIGENCE','LIVROS',90.00)
GO

SELECT * FROM PRODUTOS
GO

/*VERIFICAR O USUARIO DO BANCO*/

SELECT SUSER_NAME()
GO

/*TRIGGER DE DADOS DML
SCHEMA E O BANCO DE DADOS

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE 
AS 
	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC(10,2)
	DECLARE @DATA_PRODUTO DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @MENSAGEM VARCHAR(100)

	/*Primeiro bloco
	valores vindos de tabelas são inseridos com o comando select*/
	SELECT @IDPRODUTO =IDPRODUTO FROM inserted
	SELECT @PRODUTO = NOME FROM inserted
	SELECT @CATEGORIA= CATEGORIA FROM inserted
	SELECT @PRECO= PRECO FROM deleted
	SELECT @PRECONOVO= PRECO FROM inserted

	/*Segundo bloco
	valores vindos de funcoes(como por exemplo getdate())
	ou valores literais(como por exemplo textos escritos)
	devem ser atribuidos com o comando set*/
	SET @DATA_PRODUTO= GETDATE()
	SET @USUARIO= SUSER_NAME()
	SET @MENSAGEM= 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO VALUES(@PRODUTO,@CATEGORIA,@PRECO,@PRECONOVO,@DATA_PRODUTO,@USUARIO,@MENSAGEM)

	PRINT 'TRIGGER EXECUTADA COM SUCESSO'
	GO
	*/

	UPDATE PRODUTOS SET PRECO=300.00
	WHERE IDPRODUTO=2
	GO

	SELECT * FROM PRODUTOS
	SELECT * FROM HISTORICO
	GO

	UPDATE PRODUTOS SET NOME='LIVRO JAVA'
	WHERE IDPRODUTO= 2
	GO


/*Programando trigger em uma coluna*/
	CREATE TRIGGER TRG_ATUALIZA_PRECO
	ON DBO.PRODUTOS
	FOR UPDATE AS
	IF UPDATE(PRECO)
	BEGIN
 
	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC(10,2)
	DECLARE @DATA_PRODUTO DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @MENSAGEM VARCHAR(100)

	/*Primeiro bloco
	valores vindos de tabelas são inseridos com o comando select*/
	SELECT @IDPRODUTO =IDPRODUTO FROM inserted
	SELECT @PRODUTO = NOME FROM inserted
	SELECT @CATEGORIA= CATEGORIA FROM inserted
	SELECT @PRECO= PRECO FROM deleted
	SELECT @PRECONOVO= PRECO FROM inserted

	/*Segundo bloco
	valores vindos de funcoes(como por exemplo getdate())
	ou valores literais(como por exemplo textos escritos)
	devem ser atribuidos com o comando set*/
	SET @DATA_PRODUTO= GETDATE()
	SET @USUARIO= SUSER_NAME()
	SET @MENSAGEM= 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO VALUES(@PRODUTO,@CATEGORIA,@PRECO,@PRECONOVO,@DATA_PRODUTO,@USUARIO,@MENSAGEM)

	PRINT 'TRIGGER EXECUTADA COM SUCESSO'
	END
	GO

/*ATRIBUINDO SELECTS A VARIAVES - ANONIMO*/

DECLARE 
	@RESULTADO INT

	SELECT @RESULTADO= 50+50

	INSERT INTO RESULTADO VALUES (@RESULTADO)
	PRINT 'VALOR INSERIDO NA TABELA ' + CAST(@RESULTADO AS VARCHAR)
	GO

/*TRIGGER UPDATE
	DIFERENÇA ENTRE MONEY E NUMERIC 
	MONEY JA VEM COM PADRÃO DUAS CASA DECIMAIS 100.00,
	NUMERIC POSSO ATRIBUIR QUANTAS CASAS DECIMAIS EU QUISER
*/

CREATE TABLE EMPREGADO(
	IDEMP INT IDENTITY(1,1),
	NOME VARCHAR(30),
	SALARIO MONEY,
	IDGERENTE INT
)
GO

ALTER TABLE EMPREGADO ADD CONSTRAINT PK_IDEMP
PRIMARY KEY(IDEMP)
GO

ALTER TABLE EMPREGADO ADD CONSTRAINT FK_GERENTE
FOREIGN KEY (IDGERENTE) REFERENCES EMPREGADO(IDEMP)
GO

INSERT INTO EMPREGADO VALUES('MIGUEL',5000,NULL)
GO
INSERT INTO EMPREGADO VALUES('CAMILA',2500,1)
INSERT INTO EMPREGADO VALUES('HENRY',1750,1)
GO

CREATE TABLE HIST_SALARIO(
	IDEMPREGADO INT,
	ANTIGOSAL MONEY,
	NOVOSAL MONEY,
	DATA_SALARIO DATETIME
)
GO
/*TRIGGER REDUZIDA */
CREATE TRIGGER TG_SALARIO
ON DBO.EMPREGADO
FOR UPDATE AS
IF UPDATE(SALARIO)
BEGIN
	INSERT INTO HIST_SALARIO(IDEMPREGADO,ANTIGOSAL,NOVOSAL,DATA_SALARIO)
	SELECT D.IDEMP, D.SALARIO, I.SALARIO, GETDATE()
	FROM deleted D, inserted I
	WHERE D.IDEMP= I.IDEMP
 END
 GO

 UPDATE EMPREGADO SET SALARIO = SALARIO*1.1
 GO

 CREATE TABLE SALARIO_RANGE(
	MINSAL MONEY,
	MAXSAL MONEY
 )
 GO

 INSERT INTO SALARIO_RANGE VALUES(3000.00,6000.00)
 GO

 CREATE TRIGGER TG_RANGE
 ON DBO.EMPREGADO
 FOR INSERT,UPDATE
 AS 
	DECLARE 
		@MINSAL MONEY,
		@MAXSAL MONEY,
		@ATUALSAL MONEY

		SELECT @MINSAL = MINSAL,@MAXSAL=MAXSAL FROM SALARIO_RANGE

		SELECT @ATUALSAL= I.SALARIO
		FROM inserted I

		IF(@ATUALSAL < @MINSAL)
		BEGIN
			RAISERROR('SALARIO MENOR QUE O PISO',16,1)
			ROLLBACK TRANSACTION
		END

		IF(@ATUALSAL>@MAXSAL)
		BEGIN
			RAISERROR('SALARIO MAIOR QUE O TETO',16,1)
			ROLLBACK TRANSACTION
		END

		UPDATE EMPREGADO SET SALARIO= 9000.00
		WHERE IDEMP=1
		GO

SP_HELPTEXT TG_RANGE
GO

CREATE DATABASE Banco_Procedure
GO

Use Banco_Procedure
GO

CREATE TABLE PESSOA (
	IDPESSOA INT IDENTITY(1,1),
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	NASCIMENTO DATE NOT NULL
)
GO

CREATE TABLE TELEFONE(
	IDTELEFONE INT IDENTITY(1,1),
	TIPO CHAR(3) NOT NULL,
	NUMERO CHAR(10) NOT NULL,
	ID_PESSOA INT
)
GO

ALTER TABLE PESSOA ADD CONSTRAINT PK_IDPESSOA
PRIMARY KEY (IDPESSOA)
GO

ALTER TABLE TELEFONE ADD CONSTRAINT PK_IDTELEFONE
PRIMARY KEY(IDTELEFONE)
GO

ALTER TABLE TELEFONE ADD CONSTRAINT FK_PESSOA_TELEFONE
FOREIGN KEY (ID_PESSOA) REFERENCES PESSOA(IDPESSOA)
GO

ALTER TABLE PESSOA ADD CONSTRAINT CK_SEXO
CHECK(SEXO IN ('M','F'))
GO

ALTER TABLE TELEFONE ADD CONSTRAINT CK_TIPO
CHECK(TIPO IN('CEL','COM','RES'))
GO

INSERT INTO PESSOA VALUES('MIGUEL','M','2002-09-07')
INSERT INTO PESSOA VALUES('CAMILA','F','2000-01-02')
INSERT INTO PESSOA VALUES('HENRY','M','2000-03-08')
GO

INSERT INTO TELEFONE VALUES('CEL','987900',1)
INSERT INTO TELEFONE VALUES('COM','887900',1)
INSERT INTO TELEFONE VALUES('CEL','787900',2)
INSERT INTO TELEFONE VALUES('CEL','687900',2)
INSERT INTO TELEFONE VALUES('COM','587900',3)
INSERT INTO TELEFONE VALUES('COM','487900',2)
INSERT INTO TELEFONE VALUES('CEL','387900',3)
GO

/* CRIANDO A PROCEDURE */
CREATE PROC SOMA
AS 
	SELECT 10 + 10 AS SOMA
GO

/* EXECUTAR PROCEDURE */
 
EXEC SOMA
GO

/* DINAMICAS - COM PARAMETROS*/

CREATE PROC CONTA(
	@NUM1 INT,
	@NUM2 INT
	)
	AS 
		SELECT @NUM1 + @NUM2
GO

EXEC CONTA 90,87

/*PROCEDURES EM TABELAS*/

SELECT P.NOME,P.SEXO,T.NUMERO 
FROM PESSOA P 
INNER JOIN TELEFONE T
ON P.IDPESSOA = T.ID_PESSOA
WHERE T.TIPO='CEL'
GO

CREATE PROC SELECT_TELEFONES AS
SELECT P.NOME,T.NUMERO 
FROM PESSOA P
INNER JOIN TELEFONE T 
ON P.IDPESSOA=T.ID_PESSOA
GO

CREATE PROC SEARCH_S_TELEFONES(
		@TIPO CHAR(3)
) AS
	SELECT P.NOME,T.NUMERO FROM PESSOA P
	INNER JOIN TELEFONE T
	ON P.IDPESSOA = T.ID_PESSOA
	WHERE TIPO=@TIPO
GO

EXEC SELECT_TELEFONES
GO

EXEC SEARCH_S_TELEFONES RES
GO

/* PARAMETROS DE OUTPUT*/

CREATE PROCEDURE GETTIPO(
	@TIPO CHAR(3),
	@CONTADOR INT OUTPUT
)AS
	SELECT @CONTADOR = COUNT(*)
	FROM TELEFONE
	WHERE TIPO =@TIPO
	GO
	
DECLARE @SAIDA INT
EXEC GETTIPO 'CEL',@SAIDA OUTPUT
SELECT @SAIDA AS CONTADOR
GO
/* Insert em duas tabelas - PROCEDURE*/
CREATE PROC CADASTRO
	@NOME VARCHAR(30),
	@SEXO CHAR(1),
	@NASCIMENTO DATE,
	@TIPO CHAR(3),
	@NUMERO VARCHAR(10)
	AS
	DECLARE @FK INT

	INSERT INTO PESSOA VALUES(@NOME,@SEXO,@NASCIMENTO)
	SET @FK=(SELECT IDPESSOA FROM PESSOA WHERE IDPESSOA=@@IDENTITY)

	INSERT INTO TELEFONE VALUES (@NUMERO,@TIPO,@FK)
	GO

	EXEC CADASTRO 'FELIPE','M','07-09-2002',943422345,'CEL'
	GO

	CREATE PROC SELECT_PESSOA_TELEFONE
	AS
	SELECT P.NOME,P.SEXO,T.NUMERO FROM PESSOA P
	INNER JOIN TELEFONE T
	ON P.IDPESSOA=T.ID_PESSOA
	GO

	DECLARE 
		@CONTADOR INT
	BEGIN
		SET @CONTADOR = 5
		PRINT @CONTADOR
	END
	GO

	/*GUARDA O ULTIMO ID INSERIDO*/
	SELECT @@IDENTITY
	GO

/* NO SQL SERVER CADA COLUNA, VARIAVEL LOCAL, EXPRESSAO E PARAMETRO TEM UM TIPO
CONVERT E MAIS COMUM SER UTILIZADO EM DATA
CAST E MAIS COMUM SER UTILIZADO PARA NUMEROS OU STRINGS*/

DECLARE
	@V_NUMERO NUMERIC(10,2)=100.552,
	@V_DATA DATETIME = '20170207'
	BEGIN
		PRINT 'VALOR NUMERICO: ' + CAST(@V_NUMERO AS VARCHAR)
		PRINT 'VALOR NUMERICO: ' + CONVERT(VARCHAR,@V_NUMERO)
		PRINT 'VALOR DATA: ' + CAST(@V_DATA AS VARCHAR)
		/*FORMATO DE DATA US*/
		PRINT 'VALOR DATA: ' + CONVERT(VARCHAR, @V_DATA,121)
		PRINT 'VALOR DATA: ' + CONVERT(VARCHAR,@V_DATA,120)
		/*FORMATO DA DATA PT BR*/
		PRINT 'VALOR DATA: ' + CONVERT(VARCHAR,@V_DATA,105)
END 
GO

CREATE TABLE CARROS(
	CARRO VARCHAR(20),
	FABRICANTE VARCHAR(30)
)
GO

INSERT INTO CARROS VALUES('KA','FORD')
INSERT INTO CARROS VALUES('FIESTA','FORD')
INSERT INTO CARROS VALUES('PRIMAS','FORD')
INSERT INTO CARROS VALUES('CLIO','RENAULT')
INSERT INTO CARROS VALUES('SANDERO','RENAULT')
INSERT INTO CARROS VALUES('CHEVETE','CHEVROLET')
INSERT INTO CARROS VALUES('OMEGA','CHEVROLET')
INSERT INTO CARROS VALUES('PALIO','FIAT')
INSERT INTO CARROS VALUES('DOBLO','FIAT')
INSERT INTO CARROS VALUES('UNO','FIAT')
INSERT INTO CARROS VALUES('GOL','VOLKSWAGEN')
GO

DECLARE 
	@V_CONT_FORD INT,
	@V_CONT_FIAT INT
	BEGIN
	--METODO 1 COM  SET QUE RETORNA APENAS UM RESULTADO
		SET @V_CONT_FORD=(SELECT COUNT(*) FROM CARROS WHERE FABRICANTE = 'FORD')
		PRINT 'QUANTIDADE FORD: ' + CAST(@V_CONT_FORD AS VARCHAR)
	--METODO 2 COM SELECT 
		SELECT @V_CONT_FIAT=COUNT(*) FROM CARROS WHERE FABRICANTE='FIAT'
		PRINT 'QUANTIDADE FIAT: ' + CAST(@V_CONT_FIAT AS VARCHAR)
	END
	GO

	/*IF E ELSE*/

	DECLARE 
		@NUMERO INT = 3
	BEGIN
		IF @NUMERO=5 
			PRINT 'O VALOR É VERDADEIRO'
			ELSE
			PRINT 'O VALOR É FALSO'
	END
GO

/*CASE SQL*/
DECLARE 
	@CONTADOR INT
BEGIN
SELECT
	CASE
		WHEN FABRICANTE = 'FIAT' THEN 'FAIXA 1'
		WHEN FABRICANTE = 'CHEVROLET' THEN 'FAIXA 2'
		ELSE 'OUTRAS FAIXAS'
	END AS "INFORMAÇÕES",
	* FROM CARROS
END
GO
/* BLOCO NOMEADO = PROCEDURES */

CREATE PROC V_F(
	@NUMERO INT
	)
	AS
	IF @NUMERO = 5 
		PRINT 'O VALOR É VERDADEIRO'
		ELSE
		PRINT 'O VALOR É FALSO'
GO

EXEC V_F 5


DECLARE 
	@I INT =1
BEGIN 
	WHILE(@I<=15)
	BEGIN
		print 'valor de @i ' + cast(@I AS VARCHAR)
		SET @I=@I + 1
	END
END
GO

